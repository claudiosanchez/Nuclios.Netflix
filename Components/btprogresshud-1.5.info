{"Name":"BTProgressHUD","Id":197,"Alias":"btprogresshud","Description":"BTProgressHUD is a HUD - heads up display - for your application. It allows you to show transient information to the user, to keep them informed of longer running tasks and alerts.\n\nBTProgressHUD is based on the iOS [SVProgressHUD](https://github.com/samvermette/SVProgressHUD) project.\n\n```csharp\nusing BigTed;\n...\n\npublic override void ViewDidAppear (bool animated)\n{\n\tbase.ViewDidAppear (animated);\n\t\n\t//Show a HUD with a progress spinner and the text\n\tBTProgressHUD.Show(\"Hello there!\");\n\t\n\t//you will need to hide it somewhere else\n\t//BTProgressHUD.Dismiss();\n}\n\n```\n\nThere are other forms of HUD: \n\n* Spinner only\n* Spinner and text\n* Progress\n* Image and text\n* Toast, modelled after the [Android Toast](http://developer.android.com/guide/topics/ui/notifiers/toasts.html) display.\n\nSource code can be found on [GitHub](https://github.com/nicwise/BTProgressHUD/).\n\nSome screenshots assembled with [PlaceIt](http://placeit.breezi.com/).\n","Version":"1.5","Summary":"Add awesome HUDs to your iOS apps.","QuickStart":"#Usage\n\nHave a look at the BTProgressHUDDemo project.\n\nFirstly, you need to use the BigTed namespace\n\n```csharp\nusing BigTed;\n```\n\nThen, there are a few main static methods for showing the HUD:\n\n```csharp\nBTProgressHUD.Show(); //shows the spinner\nBTProgressHUD.Show(\"Oh hai\"); //show spinner + text\nBTProgressHUD.ShowSuccessWithStatus(\"Wow, that worked\"); //A big TICK with text\nBTProgressHUD.ShowErrorWithStatus(\"Fail!\"); //A big CROSS with text\nBTProgressHUD.ShowToast(\"Hello from Toast\"); //show an Android-style toast\n```\nAll of these can be dismissed, once your processing is finished, with\n\n```csharp\nBTProgressHUD.Dismiss();\n```\n\nShowToast, ShowSuccessWithStatus, ShowErrorWithStatus, and ShowImage all auto-dismiss.\n\nBTProgressHUD is aware of the thread you are calling from, and ensures that HUDs are always manipulated from the UI thread.\n\n\n#Other Show options\n\nYou can call Show with the following parameters\n\n* status: \u003cstring\u003e - show status text\n* progress: \u003cfloat\u003e - show a progress circle with 0.0 - 1.0 of progress. Call again to change the progress.\n* maskType: \u003cBTProgressHUD.MaskType\u003e - show with the background (the whole window) clear, black or gradient. Default is none, which allows interaction with the underlying elements.\n\n```csharp\npublic enum MaskType\n{\n\tNone = 1, // allow user interactions, don\u0027t dim background UI (default)\n\tClear, // disable user interactions, don\u0027t dim background UI\n\tBlack, // disable user interactions, dim background UI with 50% translucent black\n\tGradient // disable user interactions, dim background UI with translucent radial gradient (a-la-alertView)\n}\n```\n\n#ShowToast\nThe toast can be centered or at the bottom of the screen, like Android. This is controlled by the second parameter.\n\n```csharp\nBTProgressHUD.ShowToast (\"Your download finished\", showToastCentered: false);\n```\n\n#ShowSuccess/Error/ShowImage\nThis method dismisses the activity after 1 second. You can provide your own images if needed - make them 28x28 white PNGs.\n\n```csharp\nBTProgressHUD.ShowSuccessWithStatus (\"Wow, that worked\"); //A big TICK with text\nBTProgressHUD.ShowErrorWithStatus (\"Fail!\"); //A big CROSS with text\nBTProgressHUD.ShowImage (UIImage.FromFile(\"an-image-file.png\"), \"Nice one Stu!\");\n```\n\nYou can use the timeout parameter of ShowImage to control the time before it\u0027s dismissed.\n\n# Other Resources\n\n* [Source code](https://github.com/nicwise/BTProgressHUD/)\n","Hash":"a8f22eede84d6eebeab8c4598221a36f","TargetPlatforms":["ios"],"TrialHash":null}